openapi: 3.0.0
info:
  version: 0.6.0-SNAPSHOT
  title: OSMT API
  description: API for the Open Skills Management Toolset (Sapphire)
security:
  - bearerAuth: []

paths:
  /api/skills/search:
    post:
      tags:
        - Skills
      summary: Search for skills
      description: Return summaries for skills that match the provided query
      parameters:
        - in: query
          name: size
          description: number of skills to return per page
          schema:
            type: number
            default: 50
        - in: query
          name: from
          description: zero-indexed offset from beginning of records
          schema:
            type: number
            default: 0
        - in: query
          name: status
          schema:
            default:
              - Unpublished
              - Published
            type: array
            items:
              $ref: '#/components/schemas/PublishStatus'
        - in: query
          name: sort
          schema:
            type: string
            default: "category.asc"
            enum: ["category.asc", "category.desc", "skill.asc", "skill.desc"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Search'
      responses:
        '200':
          description: OK
          headers:
            Link:
              $ref: '#/components/headers/Link'
            X-Total-Count:
              $ref: '#/components/headers/XTotalCount'
            X-RateLimit-Limit:
              $ref: '#/components/headers/XRateLimit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/XRateRemaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/XRateReset'

          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SkillSummary'

  /api/skills:
    get:
      summary: Get all skills
      description: Return all skills in the library
      parameters:
        - in: query
          name: size
          description: number of skills to return per page
          schema:
            type: number
            default: 50
        - in: query
          name: from
          description: zero-indexed offset from beginning of records
          schema:
            type: number
            default: 0
        - in: query
          name: status
          schema:
            default:
              - Unpublished
              - Published
            type: array
            items:
              $ref: '#/components/schemas/PublishStatus'
        - in: query
          name: sort
          schema:
            type: string
            default: "category.asc"
            enum: ["category.asc", "category.desc", "skill.asc", "skill.desc"]
      responses:
        '200':
          description: OK
          headers:
            Link: 
              $ref: '#/components/headers/Link'
            X-Total-Count:
              $ref: '#/components/headers/XTotalCount'
            X-RateLimit-Limit:
              $ref: '#/components/headers/XRateLimit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/XRateRemaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/XRateReset'

          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Skill'
            text/csv:
              schema:
                type: string
                example: >-
                  id,type,author,skillName,skillStatement,alignments,keywords,category,occupations

                  https://osmt.example.com/skills/9cd84455-2086-4f41-bcac-6d518beeb6ac, RichSkillDescriptor, "https://osmt.example.com/organization", "Document Saving", "The learner copies and saves documents to their local machine.", "https://skillsource.example.com/base-skills/simple-compuhacking", "documents, file operations, computer basics", "Productivity Software", "13-0000, 13-2000, 13-2010, 13-2030, 13-2040, 13-2060, 13-2080"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResult'
      tags:
        - Skills
    post:
      tags:
        - Skills
      summary: Create new skills
      description: Define one or more new Rich Skill Descriptors
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SkillUpdate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Skill'
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResult'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'

  /api/skills/{uuid}:
    parameters:
      - name: uuid
        in: path
        description: uuid of skill
        required: true
        schema:
          type: string
    get: 
      tags:
        - Skills
      summary: Retrieve a skill 
      description: >-
        Return the full information about a Rich Skill Descriptor
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Skill'
            text/html:
              schema:
                type: string
                example: A human readable description of the skill
            text/csv:
              schema:
                type: string
                example: >-
                  id,type,author,skillName,skillStatement,alignments,keywords,category,occupations
                  https://osmt.example.com/skills/9cd84455-2086-4f41-bcac-6d518beeb6ac,RichSkillDescriptor,"https://osmt.example.com/organization","Document Saving","The learner copies and saves documents to their local machine.","https://skillsource.example.com/base-skills/simple-compuhacking","documents, file operations, computer basics","Productivity Software","13-0000, 13-2000, 13-2010, 13-2030, 13-2040, 13-2060, 13-2080"
    delete:
      tags:
        - Skills
      summary: Delete a draft skill
      description: Permanently destroy a skill.  This is only possible if the skill has not been published and is still in Draft state.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/TaskResult'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'

  /api/skills/{uuid}/update:
    parameters:
      - name: uuid
        in: path
        description: uuid of skill
        required: true
        schema:
          type: string
    post:
      tags:
        - Skills
      summary: Update a skill
      description: Update information in an existing Rich Skill Descriptor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SkillUpdate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Skill'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'

  /api/skills/publish:
    post:
      tags:
        - Skills
      summary: Publish or Archive multiple skills
      description: Publish or Archive multiple skills
      parameters:
        - in: query
          name: status
          schema:
            type: string
            default: Published
            enum:
              - Published
              - Archived
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Search'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResult'
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResult'


  /api/collections/search:
    post:
      tags:
        - Collections
      summary: Search for collections
      description: Return summaries of Collections that match the provided query
      parameters:
        - in: query
          name: size
          description: number of records to return
          schema:
            type: number
            default: 50
        - in: query
          name: from
          description: zero-indexed offset from beginning of records
          schema:
            type: number
            default: 0
        - in: query
          name: status
          schema:
            default:
              - Unpublished
              - Published
            type: array
            items:
              $ref: '#/components/schemas/PublishStatus'
        - in: query
          name: sort
          schema:
            type: string
            default: "category.asc"
            enum: ["category.asc", "category.desc", "name.asc", "name.desc"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SearchQuery'
      responses:
        '200':
          description: OK
          headers:
            Link:
              $ref: '#/components/headers/Link'
            X-Total-Count:
              $ref: '#/components/headers/XTotalCount'
            X-RateLimit-Limit:
              $ref: '#/components/headers/XRateLimit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/XRateRemaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/XRateReset'

          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CollectionSummary'


  /api/collections:
    get:
      tags:
        - Collections
      summary: Get all collections
      description: Retrieve all the collections
      parameters:
        - in: query
          name: size
          description: number of records to return
          schema:
            type: number
            default: 50
        - in: query
          name: from
          description: zero-indexed offset from beginning of records
          schema:
            type: number
            default: 0
        - in: query
          name: status
          schema:
            default:
              - Unpublished
              - Published
            type: array
            items:
              $ref: '#/components/schemas/PublishStatus'
        - in: query
          name: sort
          schema:
            type: string
            default: "category.asc"
            enum: ["category.asc", "category.desc", "name.asc", "name.desc"]
      responses:
        '200':
          description: OK
          headers:
            Link: 
              $ref: '#/components/headers/Link'
            X-Total-Count:
              $ref: '#/components/headers/XTotalCount'
            X-RateLimit-Limit:
              $ref: '#/components/headers/XRateLimit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/XRateRemaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/XRateReset'

          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collection'
    post:
      tags:
        - Collections
      summary: Create new collections
      description: Define a new collection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CollectionUpdate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collection'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'


  /api/collections/{uuid}:
    parameters:
      - name: uuid
        in: path
        description: Collection UUID
        required: true
        schema:
          type: string
    get:
      tags:
        - Collections
      summary: Retrieve a collection
      description: Retrieve all the information about a collection
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Collection'
    delete:
      tags:
        - Collections
      summary: Destroy a collection
      description: Permanently destroy a collection.  This operation can not be un-done.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/TaskResult'

  /api/collections/{uuid}/update:
    parameters:
      - name: uuid
        in: path
        description: Task uuid
        required: true
        schema:
          type: string
    post:
      tags:
        - Collections
      summary: Update a collection
      description: Update an existing collection 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionUpdate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Collection'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'

  /api/collections/{uuid}/skills:
    parameters:
      - name: uuid
        in: path
        description: Collection UUID
        required: true
        schema:
          type: string
    get:
      tags:
        - Collections
      summary: Retrieve the skills in a collection
      description: Retrieve all the information about skills in a collection
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/Skill'
    post:
      tags:
        - Collections
      summary: Add skills to a collection
      description: Batch add skills to an existing collection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SkillListUpdate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResult'
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResult'


  /api/tasks/{uuid}:
    parameters:
      - name: uuid
        in: path
        description: Task uuid
        required: true
        schema:
          type: string
    get:
      summary: Check the results of a task
      description: Return the results of a previously requested task, or its status if not complete yet
      responses:
        '200':
          description: OK - Returns the results of the task in the content-type originally requested.
        '202':
          description: Accepted - Returns the status of the in-progress Task.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResult'
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/XRateLimit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/XRateRemaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/XRateReset'
      tags:
        - Tasks



components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  headers:
    Link: 
      description: |
        Links to related resources in 
        [RFC 5988](https://tools.ietf.org/html/rfc5988#section-5) format.
        This will include a link with relation type `next` or `prev` if present.
      schema:
        type: string
    XTotalCount:
      schema:
        type: string
      description: |
        The total number of records returned on all pages for this request.
    XRateLimit:
      schema:
        type: number
      description: |
        The number of requests permitted to make per hour.
    XRateRemaining:
      schema:
        type: number
      description: |
        The number of requests remaining in the current rate limit window.
    XRateReset:
      schema:
        type: string
      description: |
        The time at which the current rate limit window resets in UTC epoch seconds.
  schemas:

    Skill:
      type: object
      required:
        - skillName
        - skillStatement
      properties:
        id:
          type: string
          format: uri
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        creator:
          type: string
          format: uri
          readOnly: true
        status:
          $ref: '#/components/schemas/PublishStatus'
        skillName:
          type: string
        skillStatement:
          type: string
        category:
          type: string
        collections:
          type: array
          items:
            type: string
        keywords:
          type: array
          items: 
            type: string
        alignments:
          type: array
          items:
            $ref: '#/components/schemas/NamedReference'
        standards:
          type: array
          items:
            $ref: '#/components/schemas/NamedReference'
        certifications:
          type: array
          items:
            $ref: '#/components/schemas/NamedReference'
        occupations:
          type: array
          items:
            $ref: '#/components/schemas/JobCode'
        employers:
          type: array
          items:
            $ref: '#/components/schemas/NamedReference'
        author:
          $ref: '#/components/schemas/NamedReference'
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        publishDate:
          type: string
          format: date-time
        archiveDate:
          type: string
          format: date-time
      example:
        id: https://osmt.example.com/skills/9cd84455-2086-4f41-bcac-6d518beeb6ac
        type: RichSkillDescriptor
        author: https://example.osmt.wgu.edu/organization
        category: Business Ethics
        skillName: "Business Ethics: Responsibility Acceptance"
        skillStatement: The learner accepts responsibility and repercussions related to ethical behavior.
        alignments:
          - id: "https://emsiservices.com/skills/versions/latest/skills/KS120FG6YP8PQYY"
        keywords:
          - "Business Ethics"
          - "Being"
        standards:
          - name: "NICE: Investigate - Digital Forensics"
          - name: "NICE: Protect and Defend - Computer Defense Analysis"
          - name: "NICE: Protect and Defend - Cyber Defense Infrastructure Support"
          - name: "NICE: Protect and Defend - Incident Response; NICE: Protect and Defend - Vulnerability Assessment and Management"
          - name: "NICE: Operate and Maintain - Customer Service and Technical Support"
          - name: "NICE: Operate and Maintain - Network Services"
          - name: "NICE: Operate and Maintain - System Administration"
          - name: "NSA-CAE KU: Networking"
          - name: "NSA-CAE KU: Wireless Security"
          - name: "NSA-CAE KU: HCI/Usability Security"
          - name: "NSA-CAE KU: Wireless Security"
        certifications:
          - name: CCNA Security
          - name: CCIE Security
          - name: CCNP Security
        occupations:
          - code: 11-3031.00
          - code: 11-3031.02
          - code: 13-1021.00
          - code: 13-1022.00
          - code: 13-1023.00
          - code: 13-1111.00
          - code: 13-1161.00
          - code: 13-2011.01
          - code: 13-2041.00
          - code: 15-2041.00
          - code: 19-3011.00
          - code: 19-4061.00
          - code: 15-1122.00
        employer:
          - name: Sample Company
    SkillSummary:
      type: object
      properties:
        id:
          type: string
          format: uri
        uuid:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/PublishStatus'
        skillName:
          type: string
        skillStatement:
          type: string
        category:
          type: string
        keywords:
          type: array
          items:
            type: string
        occupations:
          type: array
          items:
            $ref: '#/components/schemas/JobCode'
    SkillUpdate:
      type: object
      properties:
        skillName:
          type: string
        skillStatement:
          type: string
        status:
          $ref: '#/components/schemas/PublishStatus'
        category:
          type: string
        collections:
          $ref: '#/components/schemas/StringListUpdate'
        keywords:
          $ref: '#/components/schemas/StringListUpdate'
        alignments:
          $ref: '#/components/schemas/ReferenceListUpdate'
        certifications:
          $ref: '#/components/schemas/ReferenceListUpdate'
        occupations:
          $ref: '#/components/schemas/StringListUpdate'
        employers:
          $ref: '#/components/schemas/ReferenceListUpdate'
        author:
          $ref: '#/components/schemas/NamedReference'
      example:
        skillName: "New Skill Name"
        keywords:
          add:
            - "Added Keyword"
          remove:
            - "Removed Keyword"
        occupations:
          add:
            - 11-9013

    Collection:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        description: 
          type: string
        skills:
          type: array
          items:
            type: string
            format: uri
    CollectionSummary:
      type: object
      properties:
        name:
          type: string
        skillCount:
          type: number
    CollectionUpdate:
      type: object
      properties:
        name: 
          type: string
        description: 
          type: string
        skills:
          $ref: '#/components/schemas/ReferenceListUpdate'

    NamedReference:
      type: object
      properties:
        id:
          type: string
          format: uri
        name:
          type: string

    ReferenceListUpdate:
      type: object
      properties:
        add:
          type: array
          items:
            $ref: '#/components/schemas/NamedReference'
        remove:
          type: array
          items:
            $ref: '#/components/schemas/NamedReference'

    StringListUpdate:
      type: object
      properties:
        add:
          type: array
          items:
            type: string
        remove:
          type: array
          items:
            type: string

    SkillListUpdate:
      type: object
      properties:
        add:
          $ref: '#/components/schemas/Search'
        remove:
          $ref: '#/components/schemas/Search'

    JobCode:
      type: object
      properties:
        code:
          type: string
        id:
          type: string
          format: uri
        name:
          type: string
        framework:
          type: string
      required:
        - code

    Search:
      type: object
      properties:
        query:
          type: string
        advanced:
          $ref: '#/components/schemas/AdvancedSearch'
        uuids:
          type: array
          items:
            type: string

    AdvancedSearch:
      type: object
      properties:
        skillName:
          type: string
        collectionName:
          type: string
        category:
          type: string
        skillStatement:
          type: string
        keywords:
          type: array
          items:
            type: string
        occupations:
          type: array
          items:
            $ref: '#/components/schemas/NamedReference'
        standards:
          type: array
          items:
            $ref: '#/components/schemas/NamedReference'
        certifications:
          type: array
          items:
            $ref: '#/components/schemas/NamedReference'
        employers:
          type: array
          items:
            $ref: '#/components/schemas/NamedReference'
        alignments:
          type: array
          items:
            $ref: '#/components/schemas/NamedReference'

    PublishStatus:
      type: string
      enum:
        - Unpublished
        - Published
        - Archived


    TaskResult:
      type: object
      properties:
        href: 
          type: string
          format: uri
        uuid:
          type: string
          format: uuid
          readOnly: true
        content-type:
          type: string
        status:
          type: string
          enum: ["Processing","Ready"]
      example:
        href: "/tasks/3fa85f64-5717-4562-b3fc-2c963f66afa6"
        uuid: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
        content-type: "text/csv"
        status: "Processing"

    BatchResult:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        modifiedCount:
          type: number

    ErrorResult:
      type: object
      properties:
        message:
          type: string
        errors:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
              field:
                type: string





