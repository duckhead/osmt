pipeline {
  agent { label 'master' }
  environment {
    clientContainer = "client-test"
    apiContainer = "api-test"
    apiCommitContext = "Back end"
    clientCommitContext = "Front end"
  }

  stages {
    stage('Checkout') {
      steps {
        deleteDir()
        checkout scm
      }
    }

    stage("Build") {
      parallel {        
        stage("Front end") {
          steps {
            githubNotify context: clientCommitContext, description: 'Building...',  status: 'PENDING'
            sh "docker build . -t ${clientContainer} -f jenkins-ci/Dockerfile.front"
          }

          post {
            success {
              githubNotify context: clientCommitContext, description: 'Build Success!  Tests not yet started.',  status: 'PENDING'
            }

            failure {
              githubNotify context: clientCommitContext, description: 'Build failed!',  status: 'FAILURE'
            }
          }
        }

        stage("Back end") {
          steps {
            githubNotify context: apiCommitContext, description: 'Building...',  status: 'PENDING'
            sh "docker build . -t ${apiContainer} -f jenkins-ci/Dockerfile.back"
          }

          post {
            success {
              githubNotify context: apiCommitContext, description: 'Build success!  Tests not started yet.',  status: 'PENDING'
            }

            failure {
              githubNotify context: apiCommitContext, description: 'Build failed!',  status: 'FAILURE'
            }
          }
        }
      }
    }

    stage("Tests") {
      parallel {
        stage("Front end") {
           steps {
            githubNotify context: clientCommitContext, description: 'Running tests...',  status: 'PENDING'
            sh "docker run --rm ${clientContainer}"
          }

          post {
            success {
              githubNotify context: clientCommitContext, description: 'All tests passed!', status: 'SUCCESS'
            }

            failure {
              githubNotify context: clientCommitContext, description: 'There were test failures!', status: 'FAILURE'
            }
          }
        }
        
        stage("Back end") {
          steps {
            githubNotify context: apiCommitContext, description: 'Running tests...',  status: 'PENDING'
            sh "docker run --rm ${apiContainer}"
          }

          post {
            success {
              githubNotify context: apiCommitContext, description: 'All tests passed!', status: 'SUCCESS'
            }

            failure {
              githubNotify context: apiCommitContext, description: 'There were test failures!', status: 'FAILURE'
            }
          }
        }
      }
    }
  }

  post {
    always {
      sh "docker rmi ${clientContainer}"
      sh "docker rmi ${apiContainer}"
    }
  }
}
